{"ast":null,"code":"import React,{createContext,useState}from\"react\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[username,setUsername]=useState(\"\");const[firstname,setFirstname]=useState(\"\");const[lastname,setLastname]=useState(\"\");const[email,setEmail]=useState(\"\");const[loggedIn,setLoggedIn]=useState(false);const[userid,setUserId]=useState(\"\");const[userroletype,setUserRoleType]=useState(\"\");const[companyName,setCompanyName]=useState(\"\");const[companyAddress,setCompanyAddress]=useState(\"\");const[companyindustry,setCompanyIndustry]=useState(\"\");const[UserRoleId,setUserRoleId]=useState(\"\");const[companyId,setCompanyId]=useState(\"\");const handleLogin=(loggedInUsername,loggedInFirstname,loggedInLastname,loggedInEmail,loggedInUserId,loggedInUserRoleType,loggedInCompanyName,loggedInCompanyAddress,loggedInCompanyIndustry,loggedInUserRoleId,loggedInCompanyID)=>{setUsername(loggedInUsername);setFirstname(loggedInFirstname);setLastname(loggedInLastname);setEmail(loggedInEmail);setUserId(loggedInUserId);setUserRoleType(loggedInUserRoleType);setLoggedIn(true);setCompanyName(loggedInCompanyName);setCompanyAddress(loggedInCompanyAddress);setCompanyIndustry(loggedInCompanyIndustry);setUserRoleId(loggedInUserRoleId);setCompanyId(loggedInCompanyID);};const handleLogout=async()=>{try{const response=await axios.post(\"http://localhost:5000/api/logout\",{},{withCredentials:true});if(response.data.success){setUsername(\"\");setFirstname(\"\");setLastname(\"\");setEmail(\"\");setUserId(\"\");setUserRoleType(\"\");setLoggedIn(false);setCompanyName(\"\");setCompanyAddress(\"\");setCompanyIndustry(\"\");setUserRoleId(\"\");setCompanyId(\"\");}}catch(error){console.error(\"Error logging out:\",error);}};const handleSelfUpdate=updatedInfo=>{setFirstname(updatedInfo.FirstName||firstname);setLastname(updatedInfo.LastName||lastname);setEmail(updatedInfo.Email||email);};const handleCompanyInfoUpdateState=updatedInfo=>{setCompanyAddress(updatedInfo.companyAddress||companyAddress);setCompanyIndustry(updatedInfo.companyIndustry||companyindustry);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{username,firstname,lastname,email,loggedIn,userid,userroletype,companyName,companyAddress,companyindustry,companyId,UserRoleId,handleLogin,handleLogout,handleSelfUpdate,handleCompanyInfoUpdateState},children:children});};","map":{"version":3,"names":["React","createContext","useState","axios","jsx","_jsx","AuthContext","AuthProvider","_ref","children","username","setUsername","firstname","setFirstname","lastname","setLastname","email","setEmail","loggedIn","setLoggedIn","userid","setUserId","userroletype","setUserRoleType","companyName","setCompanyName","companyAddress","setCompanyAddress","companyindustry","setCompanyIndustry","UserRoleId","setUserRoleId","companyId","setCompanyId","handleLogin","loggedInUsername","loggedInFirstname","loggedInLastname","loggedInEmail","loggedInUserId","loggedInUserRoleType","loggedInCompanyName","loggedInCompanyAddress","loggedInCompanyIndustry","loggedInUserRoleId","loggedInCompanyID","handleLogout","response","post","withCredentials","data","success","error","console","handleSelfUpdate","updatedInfo","FirstName","LastName","Email","handleCompanyInfoUpdateState","companyIndustry","Provider","value"],"sources":["C:/Users/Administrator/Desktop/react-express/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [firstname, setFirstname] = useState(\"\");\r\n  const [lastname, setLastname] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  const [userid, setUserId] = useState(\"\");\r\n  const [userroletype, setUserRoleType] = useState(\"\");\r\n  const [companyName, setCompanyName] = useState(\"\");\r\n  const [companyAddress, setCompanyAddress] = useState(\"\");\r\n  const [companyindustry, setCompanyIndustry] = useState(\"\");\r\n  const [UserRoleId, setUserRoleId] = useState(\"\");\r\n  const [companyId, setCompanyId] = useState(\"\");\r\n\r\n  const handleLogin = (\r\n    loggedInUsername,\r\n    loggedInFirstname,\r\n    loggedInLastname,\r\n    loggedInEmail,\r\n    loggedInUserId,\r\n    loggedInUserRoleType,\r\n    loggedInCompanyName,\r\n    loggedInCompanyAddress,\r\n    loggedInCompanyIndustry,\r\n    loggedInUserRoleId,\r\n    loggedInCompanyID\r\n  ) => {\r\n    setUsername(loggedInUsername);\r\n    setFirstname(loggedInFirstname);\r\n    setLastname(loggedInLastname);\r\n    setEmail(loggedInEmail);\r\n    setUserId(loggedInUserId);\r\n    setUserRoleType(loggedInUserRoleType);\r\n    setLoggedIn(true);\r\n    setCompanyName(loggedInCompanyName);\r\n    setCompanyAddress(loggedInCompanyAddress);\r\n    setCompanyIndustry(loggedInCompanyIndustry);\r\n    setUserRoleId(loggedInUserRoleId);\r\n    setCompanyId(loggedInCompanyID);\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/logout\",\r\n        {},\r\n        { withCredentials: true }\r\n      );\r\n\r\n      if (response.data.success) {\r\n        setUsername(\"\");\r\n        setFirstname(\"\");\r\n        setLastname(\"\");\r\n        setEmail(\"\");\r\n        setUserId(\"\");\r\n        setUserRoleType(\"\");\r\n        setLoggedIn(false);\r\n        setCompanyName(\"\");\r\n        setCompanyAddress(\"\");\r\n        setCompanyIndustry(\"\");\r\n        setUserRoleId(\"\");\r\n        setCompanyId(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error logging out:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSelfUpdate = (updatedInfo) => {\r\n    setFirstname(updatedInfo.FirstName || firstname);\r\n    setLastname(updatedInfo.LastName || lastname);\r\n    setEmail(updatedInfo.Email || email);\r\n  };\r\n\r\n  const handleCompanyInfoUpdateState = (updatedInfo) => {\r\n    setCompanyAddress(updatedInfo.companyAddress || companyAddress);\r\n    setCompanyIndustry(updatedInfo.companyIndustry || companyindustry);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        username,\r\n        firstname,\r\n        lastname,\r\n        email,\r\n        loggedIn,\r\n        userid,\r\n        userroletype,\r\n        companyName,\r\n        companyAddress,\r\n        companyindustry,\r\n        companyId,\r\n        UserRoleId,\r\n        handleLogin,\r\n        handleLogout,\r\n        handleSelfUpdate,\r\n        handleCompanyInfoUpdateState,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}