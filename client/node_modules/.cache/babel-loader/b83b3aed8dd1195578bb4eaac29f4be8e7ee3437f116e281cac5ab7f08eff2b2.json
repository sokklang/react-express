{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\J3adl30y\\\\Desktop\\\\react-express\\\\client\\\\src\\\\Task.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthContext } from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Task = () => {\n  _s();\n  const {\n    loggedIn\n  } = useContext(AuthContext);\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Simulating an asynchronous process, e.g., checking authentication status\n    const checkAuthStatus = async () => {\n      // Assume there's an asynchronous operation to check authentication status\n      // For simplicity, we'll use a setTimeout to simulate an async operation\n      setTimeout(() => {\n        setLoading(false);\n        if (!loggedIn) {\n          // If the user is not logged in, redirect to the login page\n          navigate(\"/login\");\n        }\n      }, 1000);\n    };\n    checkAuthStatus();\n  }, [loggedIn, navigate]);\n  if (loading) {\n    // Render a loading indicator or message while checking authentication status\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render the Task component content\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Task\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n_s(Task, \"jDOKON9flaMZSb0vP9Y67ms0eTc=\", false, function () {\n  return [useNavigate];\n});\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useNavigate","AuthContext","jsxDEV","_jsxDEV","Task","_s","loggedIn","navigate","loading","setLoading","checkAuthStatus","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/J3adl30y/Desktop/react-express/client/src/Task.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { AuthContext } from \"./AuthContext\";\r\n\r\nconst Task = () => {\r\n  const { loggedIn } = useContext(AuthContext);\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Simulating an asynchronous process, e.g., checking authentication status\r\n    const checkAuthStatus = async () => {\r\n      // Assume there's an asynchronous operation to check authentication status\r\n      // For simplicity, we'll use a setTimeout to simulate an async operation\r\n      setTimeout(() => {\r\n        setLoading(false);\r\n\r\n        if (!loggedIn) {\r\n          // If the user is not logged in, redirect to the login page\r\n          navigate(\"/login\");\r\n        }\r\n      }, 1000);\r\n    };\r\n\r\n    checkAuthStatus();\r\n  }, [loggedIn, navigate]);\r\n\r\n  if (loading) {\r\n    // Render a loading indicator or message while checking authentication status\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Render the Task component content\r\n  return <div>Task</div>;\r\n};\r\n\r\nexport default Task;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM;IAAEC;EAAS,CAAC,GAAGT,UAAU,CAACI,WAAW,CAAC;EAC5C,MAAMM,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC;MACA;MACAC,UAAU,CAAC,MAAM;QACfF,UAAU,CAAC,KAAK,CAAC;QAEjB,IAAI,CAACH,QAAQ,EAAE;UACb;UACAC,QAAQ,CAAC,QAAQ,CAAC;QACpB;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IAEDG,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACJ,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAExB,IAAIC,OAAO,EAAE;IACX;IACA,oBAAOL,OAAA;MAAAS,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,oBAAOb,OAAA;IAAAS,QAAA,EAAK;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACxB,CAAC;AAACX,EAAA,CA9BID,IAAI;EAAA,QAESJ,WAAW;AAAA;AAAAiB,EAAA,GAFxBb,IAAI;AAgCV,eAAeA,IAAI;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}