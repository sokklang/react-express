{"ast":null,"code":"import React,{useState,useEffect,useCallback}from\"react\";import axios from\"axios\";import defaultProfileImage from\"../profile/profile.jpg\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Assignuser=_ref=>{let{showModal,handleClose,selectAssignTask}=_ref;const[userProfiles,setUserProfiles]=useState([]);const[selectedUsers,setSelectedUsers]=useState([]);const[errorMessage,setErrorMessage]=useState(\"\");const[successMessage,setSuccessMessage]=useState(\"\");const arrayToBlobUrl=(array,mimeType)=>{const blob=new Blob([Uint8Array.from(array)],{type:mimeType});return URL.createObjectURL(blob);};const fetchUserCompany=async()=>{try{const response=await axios.get(\"http://localhost:5000/api/getuserprofileadmincompany\",{withCredentials:true});console.log(\"user\",response.data);setUserProfiles(response.data);setErrorMessage(\"\");// Clear any previous errors\nsetSuccessMessage(\"\");// Clear success message as well\n}catch(error){setErrorMessage(\"Error fetching user profiles\");console.error(error);}};const handleAssignTask=async e=>{e.preventDefault();try{const taskId=selectAssignTask;// Assuming selectAssignTask is the taskId\nconst assignedUserIds=selectedUsers;// Assuming selectedUsers is the array of user IDs\n//console.log(\"assigneduser\", assignedUserIds);\nif(!taskId||!assignedUserIds||assignedUserIds.length===0){setSuccessMessage(\"\");setErrorMessage(\"Task ID and at least one assigned user are required.\");return;}// Perform your request to the server with taskId and assignedUserIds\nconst response=await axios.post(\"http://localhost:5000/api/assigntask\",{taskId,assignedUserIds},{withCredentials:true// Add any other necessary configurations for your request\n});// Handle the response from the server\nconsole.log(\"Server Response:\",response.data);setErrorMessage(\"\");setSuccessMessage(response.data.message);}catch(error){setSuccessMessage(\"\");setErrorMessage(error.response.data.error);console.error(error);}};const handleUserSelection=userId=>{setSelectedUsers(prevSelectedUsers=>{// Ensure prevSelectedUsers is always an array\nconst currentSelectedUsers=Array.isArray(prevSelectedUsers)?prevSelectedUsers:selectedUsers;console.log(\"currentSelectedUsers\",currentSelectedUsers);const newSelectedUsers=currentSelectedUsers.includes(userId)?currentSelectedUsers.filter(id=>id!==userId):[...currentSelectedUsers,userId];console.log(\"Selected Users:\",newSelectedUsers);// Log the selectedUsers array\nreturn newSelectedUsers;});};const fetchAssignedUsers=useCallback(async()=>{try{const taskId=selectAssignTask;const response=await axios.get(\"http://localhost:5000/api/getusertaskassigned/\".concat(taskId),{withCredentials:true});// Assuming the backend response has a structure like { assignedUserIds: \"[1,2,3]\" } String Format\nconst{assignedUserIds}=response.data;// Parse the retrieved string into an array using JSON.parse()\nconst parsedAssignedUserIds=JSON.parse(assignedUserIds);// Set the retrieved user IDs in the state\nsetSelectedUsers(parsedAssignedUserIds);}catch(error){console.error(error);}},[selectAssignTask]);useEffect(()=>{if(showModal){// Call fetchUserCompany only when showModal is true\nfetchUserCompany();fetchAssignedUsers();}},[showModal,fetchAssignedUsers]);const onClose=()=>{handleClose();setSelectedUsers([]);};return/*#__PURE__*/_jsx(\"div\",{className:\"modal fade \".concat(showModal?\"show\":\"\"),style:{display:showModal?\"block\":\"none\"},\"data-bs-theme\":\"dark\",children:/*#__PURE__*/_jsx(\"div\",{className:\"modal-dialog modal-xl modal-dialog-centered \",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"modal-header\",children:[/*#__PURE__*/_jsxs(\"h5\",{className:\"modal-title text-white\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-user-plus fa-fw me-2\"}),\"Assign To\"]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn-close\",onClick:onClose})]}),/*#__PURE__*/_jsx(\"div\",{className:\"modal-body text-white text-start\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleAssignTask,children:[/*#__PURE__*/_jsx(\"div\",{style:{display:\"flex\",flexWrap:\"wrap\",justifyContent:\"flex-start\"},children:userProfiles.map(user=>/*#__PURE__*/_jsx(\"div\",{className:\"card mb-3\",style:{flex:\"0 1 calc(25% - 1em)\",margin:\"0.5em\",backgroundColor:selectedUsers.includes(user.UserID)?\"#007bff\":\"\",color:selectedUsers.includes(user.UserID)?\"white\":\"\"},onClick:()=>handleUserSelection(user.UserID),children:/*#__PURE__*/_jsxs(\"div\",{className:\"card-body\",style:{display:\"flex\",flexDirection:\"column\",alignItems:\"center\",justifyContent:\"center\"},children:[user.ImageData?/*#__PURE__*/ // Convert Buffer to Blob and create Blob URL\n_jsx(\"img\",{src:arrayToBlobUrl(user.ImageData.data,\"image/jpeg\"),alt:\"Profile for \".concat(user.Username),className:\"card-img-top\",style:{maxWidth:\"150px\",maxHeight:\"150px\"}}):/*#__PURE__*/ // Render default profile image if ImageData is not available\n_jsx(\"img\",{src:defaultProfileImage,alt:\"Default Profile for \".concat(user.Username),className:\"card-img-top\",style:{maxWidth:\"150px\",maxHeight:\"150px\"}}),/*#__PURE__*/_jsxs(\"div\",{className:\"card-text\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"mb-0\",children:[\"User ID: \",user.UserID]}),/*#__PURE__*/_jsxs(\"p\",{className:\"mb-0\",children:[\"Username: \",user.Username]})]})]})},user.UserID))}),errorMessage&&/*#__PURE__*/_jsx(\"div\",{className:\"alert alert-danger mt-3\",role:\"alert\",children:errorMessage}),successMessage&&/*#__PURE__*/_jsx(\"div\",{className:\"alert alert-success mt-3\",role:\"alert\",children:successMessage}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-footer\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-secondary\",onClick:onClose,children:\"Close\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-primary\",children:\"Assign\"})]})]})})]})})});};export default Assignuser;","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","defaultProfileImage","jsx","_jsx","jsxs","_jsxs","Assignuser","_ref","showModal","handleClose","selectAssignTask","userProfiles","setUserProfiles","selectedUsers","setSelectedUsers","errorMessage","setErrorMessage","successMessage","setSuccessMessage","arrayToBlobUrl","array","mimeType","blob","Blob","Uint8Array","from","type","URL","createObjectURL","fetchUserCompany","response","get","withCredentials","console","log","data","error","handleAssignTask","e","preventDefault","taskId","assignedUserIds","length","post","message","handleUserSelection","userId","prevSelectedUsers","currentSelectedUsers","Array","isArray","newSelectedUsers","includes","filter","id","fetchAssignedUsers","concat","parsedAssignedUserIds","JSON","parse","onClose","className","style","display","children","onClick","onSubmit","flexWrap","justifyContent","map","user","flex","margin","backgroundColor","UserID","color","flexDirection","alignItems","ImageData","src","alt","Username","maxWidth","maxHeight","role"],"sources":["C:/Users/Administrator/Desktop/react-express/client/src/assigntask/Assignuser.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport defaultProfileImage from \"../profile/profile.jpg\";\r\n\r\nconst Assignuser = ({ showModal, handleClose, selectAssignTask }) => {\r\n  const [userProfiles, setUserProfiles] = useState([]);\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n\r\n  const arrayToBlobUrl = (array, mimeType) => {\r\n    const blob = new Blob([Uint8Array.from(array)], { type: mimeType });\r\n    return URL.createObjectURL(blob);\r\n  };\r\n\r\n  const fetchUserCompany = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:5000/api/getuserprofileadmincompany\",\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n      console.log(\"user\", response.data);\r\n      setUserProfiles(response.data);\r\n      setErrorMessage(\"\"); // Clear any previous errors\r\n      setSuccessMessage(\"\"); // Clear success message as well\r\n    } catch (error) {\r\n      setErrorMessage(\"Error fetching user profiles\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleAssignTask = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const taskId = selectAssignTask; // Assuming selectAssignTask is the taskId\r\n      const assignedUserIds = selectedUsers; // Assuming selectedUsers is the array of user IDs\r\n      //console.log(\"assigneduser\", assignedUserIds);\r\n\r\n      if (!taskId || !assignedUserIds || assignedUserIds.length === 0) {\r\n        setSuccessMessage(\"\");\r\n        setErrorMessage(\"Task ID and at least one assigned user are required.\");\r\n        return;\r\n      }\r\n\r\n      // Perform your request to the server with taskId and assignedUserIds\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/assigntask\",\r\n        { taskId, assignedUserIds },\r\n        {\r\n          withCredentials: true,\r\n          // Add any other necessary configurations for your request\r\n        }\r\n      );\r\n\r\n      // Handle the response from the server\r\n      console.log(\"Server Response:\", response.data);\r\n      setErrorMessage(\"\");\r\n      setSuccessMessage(response.data.message);\r\n    } catch (error) {\r\n      setSuccessMessage(\"\");\r\n      setErrorMessage(error.response.data.error);\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleUserSelection = (userId) => {\r\n    setSelectedUsers((prevSelectedUsers) => {\r\n      // Ensure prevSelectedUsers is always an array\r\n      const currentSelectedUsers = Array.isArray(prevSelectedUsers)\r\n        ? prevSelectedUsers\r\n        : selectedUsers;\r\n\r\n      console.log(\"currentSelectedUsers\", currentSelectedUsers);\r\n\r\n      const newSelectedUsers = currentSelectedUsers.includes(userId)\r\n        ? currentSelectedUsers.filter((id) => id !== userId)\r\n        : [...currentSelectedUsers, userId];\r\n\r\n      console.log(\"Selected Users:\", newSelectedUsers); // Log the selectedUsers array\r\n\r\n      return newSelectedUsers;\r\n    });\r\n  };\r\n\r\n  const fetchAssignedUsers = useCallback(async () => {\r\n    try {\r\n      const taskId = selectAssignTask;\r\n      const response = await axios.get(\r\n        `http://localhost:5000/api/getusertaskassigned/${taskId}`,\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n\r\n      // Assuming the backend response has a structure like { assignedUserIds: \"[1,2,3]\" } String Format\r\n      const { assignedUserIds } = response.data;\r\n\r\n      // Parse the retrieved string into an array using JSON.parse()\r\n      const parsedAssignedUserIds = JSON.parse(assignedUserIds);\r\n\r\n      // Set the retrieved user IDs in the state\r\n      setSelectedUsers(parsedAssignedUserIds);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, [selectAssignTask]);\r\n\r\n  useEffect(() => {\r\n    if (showModal) {\r\n      // Call fetchUserCompany only when showModal is true\r\n      fetchUserCompany();\r\n      fetchAssignedUsers();\r\n    }\r\n  }, [showModal, fetchAssignedUsers]);\r\n\r\n  const onClose = () => {\r\n    handleClose();\r\n    setSelectedUsers([]);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`modal fade ${showModal ? \"show\" : \"\"}`}\r\n      style={{ display: showModal ? \"block\" : \"none\" }}\r\n      data-bs-theme=\"dark\"\r\n    >\r\n      <div className=\"modal-dialog modal-xl modal-dialog-centered \">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title text-white\">\r\n              <i className=\"fa fa-user-plus fa-fw me-2\"></i>Assign To\r\n            </h5>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn-close\"\r\n              onClick={onClose}\r\n            ></button>\r\n          </div>\r\n          <div className=\"modal-body text-white text-start\">\r\n            <form onSubmit={handleAssignTask}>\r\n              {/* Iterate over user profiles and display them */}\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexWrap: \"wrap\",\r\n                  justifyContent: \"flex-start\",\r\n                }}\r\n              >\r\n                {userProfiles.map((user) => (\r\n                  <div\r\n                    key={user.UserID}\r\n                    className=\"card mb-3\"\r\n                    style={{\r\n                      flex: \"0 1 calc(25% - 1em)\",\r\n                      margin: \"0.5em\",\r\n                      backgroundColor: selectedUsers.includes(user.UserID)\r\n                        ? \"#007bff\"\r\n                        : \"\",\r\n                      color: selectedUsers.includes(user.UserID) ? \"white\" : \"\",\r\n                    }}\r\n                    onClick={() => handleUserSelection(user.UserID)}\r\n                  >\r\n                    <div\r\n                      className=\"card-body\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                      }}\r\n                    >\r\n                      {user.ImageData ? (\r\n                        // Convert Buffer to Blob and create Blob URL\r\n                        <img\r\n                          src={arrayToBlobUrl(\r\n                            user.ImageData.data,\r\n                            \"image/jpeg\"\r\n                          )}\r\n                          alt={`Profile for ${user.Username}`}\r\n                          className=\"card-img-top\"\r\n                          style={{ maxWidth: \"150px\", maxHeight: \"150px\" }}\r\n                        />\r\n                      ) : (\r\n                        // Render default profile image if ImageData is not available\r\n                        <img\r\n                          src={defaultProfileImage}\r\n                          alt={`Default Profile for ${user.Username}`}\r\n                          className=\"card-img-top\"\r\n                          style={{ maxWidth: \"150px\", maxHeight: \"150px\" }}\r\n                        />\r\n                      )}\r\n\r\n                      <div className=\"card-text\">\r\n                        <p className=\"mb-0\">User ID: {user.UserID}</p>\r\n                        <p className=\"mb-0\">Username: {user.Username}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              {errorMessage && (\r\n                <div className=\"alert alert-danger mt-3\" role=\"alert\">\r\n                  {errorMessage}\r\n                </div>\r\n              )}\r\n              {successMessage && (\r\n                <div className=\"alert alert-success mt-3\" role=\"alert\">\r\n                  {successMessage}\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  onClick={onClose}\r\n                >\r\n                  Close\r\n                </button>\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                  Assign\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Assignuser;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}