{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\J3adl30y\\\\Desktop\\\\react-express\\\\client\\\\src\\\\context\\\\CompanyContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CompanyContext = /*#__PURE__*/createContext();\nexport const CompanyProvider = ({\n  children\n}) => {\n  _s();\n  //const [companyName, setCompanyName] = useState(\"\");\n  //const [companyAddress, setCompanyAddress] = useState(\"\");\n  //const [companyIndustry, setCompanyIndustry] = useState(\"\");\n  const [companyLogo, setCompanyLogo] = useState(\"\");\n  const updateCompanyLogo = async LogoData => {\n    try {\n      console.log(\"imageData\", LogoData);\n      const response = await axios.put(\"http://localhost:5000/api/updatecompanylogo\",\n      // Update the URL based on your backend route\n      LogoData,\n      // Pass the Blob directly as the request body\n\n      {\n        withCredentials: true,\n        headers: {\n          \"Content-Type\": \"application/octet-stream\" // Set the content type to indicate a binary stream\n        }\n      });\n      if (response.status === 200) {\n        console.log(\"Company Logo updated successfully\");\n        getCompanyLogo();\n        // Perform any additional actions or UI updates as needed\n      }\n    } catch (error) {\n      console.error(\"Error updating Company Logo image:\", error);\n    }\n  };\n  const getCompanyLogo = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/getcompanylogo\", {\n        withCredentials: true,\n        responseType: \"arraybuffer\"\n      });\n      if (response.status === 200) {\n        const LogoData = response.data;\n        const blob = new Blob([LogoData], {\n          type: \"image/jpeg\"\n        });\n        const blobUrl = URL.createObjectURL(blob);\n\n        // Use functional update to prevent infinite loop\n        setCompanyLogo(prevLogo => {\n          if (blobUrl !== prevLogo) {\n            return blobUrl;\n          }\n          return prevLogo;\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching Company Logo data:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CompanyContext.Provider, {\n    value: {\n      //companyName,\n      //companyAddress,\n      //companyIndustry,\n      companyLogo,\n      updateCompanyLogo,\n      getCompanyLogo\n      // Additional values or functions can be added here\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(CompanyProvider, \"RGaq/BMpRSdwyvhFQsyfJXck2ek=\");\n_c = CompanyProvider;\nvar _c;\n$RefreshReg$(_c, \"CompanyProvider\");","map":{"version":3,"names":["React","createContext","useState","axios","jsxDEV","_jsxDEV","CompanyContext","CompanyProvider","children","_s","companyLogo","setCompanyLogo","updateCompanyLogo","LogoData","console","log","response","put","withCredentials","headers","status","getCompanyLogo","error","get","responseType","data","blob","Blob","type","blobUrl","URL","createObjectURL","prevLogo","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/J3adl30y/Desktop/react-express/client/src/context/CompanyContext.js"],"sourcesContent":["import React, { createContext, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const CompanyContext = createContext();\r\n\r\nexport const CompanyProvider = ({ children }) => {\r\n  //const [companyName, setCompanyName] = useState(\"\");\r\n  //const [companyAddress, setCompanyAddress] = useState(\"\");\r\n  //const [companyIndustry, setCompanyIndustry] = useState(\"\");\r\n  const [companyLogo, setCompanyLogo] = useState(\"\");\r\n\r\n  const updateCompanyLogo = async (LogoData) => {\r\n    try {\r\n      console.log(\"imageData\", LogoData);\r\n      const response = await axios.put(\r\n        \"http://localhost:5000/api/updatecompanylogo\", // Update the URL based on your backend route\r\n        LogoData, // Pass the Blob directly as the request body\r\n\r\n        {\r\n          withCredentials: true,\r\n          headers: {\r\n            \"Content-Type\": \"application/octet-stream\", // Set the content type to indicate a binary stream\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        console.log(\"Company Logo updated successfully\");\r\n        getCompanyLogo();\r\n        // Perform any additional actions or UI updates as needed\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating Company Logo image:\", error);\r\n    }\r\n  };\r\n\r\n  const getCompanyLogo = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:5000/api/getcompanylogo\",\r\n        { withCredentials: true, responseType: \"arraybuffer\" }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        const LogoData = response.data;\r\n        const blob = new Blob([LogoData], { type: \"image/jpeg\" });\r\n        const blobUrl = URL.createObjectURL(blob);\r\n\r\n        // Use functional update to prevent infinite loop\r\n        setCompanyLogo((prevLogo) => {\r\n          if (blobUrl !== prevLogo) {\r\n            return blobUrl;\r\n          }\r\n          return prevLogo;\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching Company Logo data:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CompanyContext.Provider\r\n      value={{\r\n        //companyName,\r\n        //companyAddress,\r\n        //companyIndustry,\r\n        companyLogo,\r\n        updateCompanyLogo,\r\n        getCompanyLogo,\r\n        // Additional values or functions can be added here\r\n      }}\r\n    >\r\n      {children}\r\n    </CompanyContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,cAAc,gBAAGL,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMM,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C;EACA;EACA;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMU,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;IAC5C,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,QAAQ,CAAC;MAClC,MAAMG,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAC9B,6CAA6C;MAAE;MAC/CJ,QAAQ;MAAE;;MAEV;QACEK,eAAe,EAAE,IAAI;QACrBC,OAAO,EAAE;UACP,cAAc,EAAE,0BAA0B,CAAE;QAC9C;MACF,CACF,CAAC;MAED,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QAC3BN,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;QAChDM,cAAc,CAAC,CAAC;QAChB;MACF;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D;EACF,CAAC;EAED,MAAMD,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMb,KAAK,CAACoB,GAAG,CAC9B,0CAA0C,EAC1C;QAAEL,eAAe,EAAE,IAAI;QAAEM,YAAY,EAAE;MAAc,CACvD,CAAC;MAED,IAAIR,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMP,QAAQ,GAAGG,QAAQ,CAACS,IAAI;QAC9B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACd,QAAQ,CAAC,EAAE;UAAEe,IAAI,EAAE;QAAa,CAAC,CAAC;QACzD,MAAMC,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;;QAEzC;QACAf,cAAc,CAAEqB,QAAQ,IAAK;UAC3B,IAAIH,OAAO,KAAKG,QAAQ,EAAE;YACxB,OAAOH,OAAO;UAChB;UACA,OAAOG,QAAQ;QACjB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D;EACF,CAAC;EAED,oBACEjB,OAAA,CAACC,cAAc,CAAC2B,QAAQ;IACtBC,KAAK,EAAE;MACL;MACA;MACA;MACAxB,WAAW;MACXE,iBAAiB;MACjBS;MACA;IACF,CAAE;IAAAb,QAAA,EAEDA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAAC7B,EAAA,CAvEWF,eAAe;AAAAgC,EAAA,GAAfhC,eAAe;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}