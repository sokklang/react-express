{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\J3adl30y\\\\Desktop\\\\react-express\\\\client\\\\src\\\\archivetask\\\\Archivetask.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Archivetask = () => {\n  _s();\n  const {\n    loggedIn\n  } = useContext(AuthContext);\n  const [tasks, setTasks] = useState([]);\n  const getArchiveTask = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/getarchivetask\", {\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        console.log(\"Archived Fetch Successfully\", response.data);\n        setTasks(response.data); // Set tasks directly from response data\n      }\n    } catch (error) {\n      console.error(\"Error fetching Archived tasks:\", error.response.data.error);\n    }\n  };\n  useEffect(() => {\n    if (loggedIn) {\n      FetchMyTasks();\n    }\n  }, [loggedIn]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Archivetask\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 10\n  }, this);\n};\n_s(Archivetask, \"aErbCoxCa7w0mind0k2leTYxc9c=\");\n_c = Archivetask;\nexport default Archivetask;\nvar _c;\n$RefreshReg$(_c, \"Archivetask\");","map":{"version":3,"names":["React","axios","AuthContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","Archivetask","_s","loggedIn","tasks","setTasks","getArchiveTask","response","get","withCredentials","status","console","log","data","error","FetchMyTasks","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/J3adl30y/Desktop/react-express/client/src/archivetask/Archivetask.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\n\r\nimport { useState, useEffect, useContext } from \"react\";\r\n\r\nconst Archivetask = () => {\r\n  const { loggedIn } = useContext(AuthContext);\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const getArchiveTask = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:5000/api/getarchivetask\",\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      );\r\n      if (response.status === 200) {\r\n        console.log(\"Archived Fetch Successfully\", response.data);\r\n        setTasks(response.data); // Set tasks directly from response data\r\n      }\r\n    } catch (error) {\r\n      console.error(\r\n        \"Error fetching Archived tasks:\",\r\n        error.response.data.error\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (loggedIn) {\r\n      FetchMyTasks();\r\n    }\r\n  }, [loggedIn]);\r\n\r\n  return <div>Archivetask</div>;\r\n};\r\n\r\nexport default Archivetask;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,SAASC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAS,CAAC,GAAGL,UAAU,CAACH,WAAW,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMU,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAC9B,0CAA0C,EAC1C;QACEC,eAAe,EAAE;MACnB,CACF,CAAC;MACD,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QAC3BC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEL,QAAQ,CAACM,IAAI,CAAC;QACzDR,QAAQ,CAACE,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC;MAC3B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CACX,gCAAgC,EAChCA,KAAK,CAACP,QAAQ,CAACM,IAAI,CAACC,KACtB,CAAC;IACH;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACd,IAAIM,QAAQ,EAAE;MACZY,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;EAEd,oBAAOH,OAAA;IAAAgB,QAAA,EAAK;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC/B,CAAC;AAAClB,EAAA,CA/BID,WAAW;AAAAoB,EAAA,GAAXpB,WAAW;AAiCjB,eAAeA,WAAW;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}